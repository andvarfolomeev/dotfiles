local load_local_config = function()
  if vim.fn.filereadable(vim.fn.getcwd() .. '/.nvim.lua') == 1 then
    vim.cmd('luafile ' .. vim.fn.getcwd() .. '/.nvim.lua')
  end
end

local install_lazy = function()
  local lazypath = vim.fn.stdpath('data') .. '/lazy/lazy.nvim'
  if not (vim.uv or vim.loop).fs_stat(lazypath) then
    vim.fn.system({
      'git',
      'clone',
      '--filter=blob:none',
      'https://github.com/folke/lazy.nvim.git',
      '--branch=stable',
      lazypath,
    })
  end
  vim.opt.rtp:prepend(lazypath)
end

local escape = function(str)
  local escape_chars = [[;,."|\]]
  return vim.fn.escape(str, escape_chars)
end

--}}}

load_local_config()
install_lazy()

local en = [[`qwertyuiop[]asdfghjkl;'zxcvbnm]]
local ru = [[ёйцукенгшщзхъфывапролджэячсмить]]
local en_shift = [[~QWERTYUIOP{}ASDFGHJKL:"ZXCVBNM<>]]
local ru_shift =
  [[ËЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ]]
local langmap = vim.fn.join({
  escape(ru_shift) .. ';' .. escape(en_shift),
  escape(ru) .. ';' .. escape(en),
}, ',')

vim.opt.spell = false
vim.opt.spelllang = 'en_us,ru_ru'
vim.opt.langmap = langmap

vim.g.mapleader = ' '
vim.opt.compatible = false

vim.opt.fileformat = 'unix'
vim.opt.encoding = 'utf-8'
vim.opt.fileencoding = 'utf-8'

vim.opt.swapfile = false
vim.opt.backup = false
vim.opt.writebackup = false
vim.opt.undofile = true
vim.opt.undolevels = 10000
vim.opt.confirm = true

vim.opt.timeoutlen = 300
vim.opt.updatetime = 200

vim.opt.ttyfast = true
-- vim.opt.lazyredraw = true

vim.opt.scrolloff = 8
vim.opt.relativenumber = true
vim.opt.number = true
vim.opt.wrap = false
vim.opt.signcolumn = 'yes:3'
vim.opt.termguicolors = true
vim.opt.cmdheight = 1
vim.opt.laststatus = 3

vim.opt.inccommand = 'split'
vim.opt.hlsearch = true
vim.opt.incsearch = true
vim.opt.ignorecase = true
vim.opt.smartcase = true
vim.opt.showmatch = true
vim.opt.magic = true

vim.opt.foldmethod = 'marker'

vim.opt.autoread = true

-- vim.opt.completeopt = { 'menu', 'menuone', 'noselect' }
vim.opt.shortmess = vim.opt.shortmess
  + { c = true, F = true, W = true, I = true }
vim.opt.pumheight = 5
vim.opt.pumblend = 10

vim.opt.splitbelow = true
vim.opt.splitright = true

vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.smartindent = true

vim.opt.errorbells = false
vim.opt.visualbell = true

vim.opt.background = 'dark'

-- Set indentation to 2 spaces
vim.api.nvim_create_augroup('setIndent', { clear = true })
local languages_with_2_space = {
  'cpp',
  'javascript',
  'javascriptreact',
  'json',
  'lua',
  'markdown',
  'nix',
  'typescript',
  'vue',
}
vim.api.nvim_create_autocmd('Filetype', {
  group = 'setIndent',
  pattern = languages_with_2_space,
  command = 'setlocal shiftwidth=2 tabstop=2 softtabstop=2',
})
-- Enter insert mode when switching to terminal
vim.api.nvim_create_autocmd(
  'TermOpen',
  { command = 'setlocal listchars = nonumber norelativenumber nocursorline' }
)
vim.api.nvim_create_autocmd(
  'TermOpen',
  { pattern = '', command = 'startinsert' }
)
-- Close terminal buffer on process exit
vim.api.nvim_create_autocmd(
  'BufLeave',
  { pattern = 'term://*', command = 'stopinsert' }
)
-- Delete term buffer
vim.api.nvim_create_autocmd(
  'TermClose',
  { pattern = 'term://*/bin/zsh', command = 'bd!' }
)

-- require('lazy').setup({
--   {
--     'LazyVim/LazyVim',
--     version = false,
--     opts = {
--       colorscheme = 'catppuccin',
--       news = { lazyvim = false, neovim = false },
--     },
--   },
--
--   { import = 'lazyvim.plugins' },
--
--   { import = 'lazyvim.plugins.extras.formatting.prettier' },
--   { import = 'lazyvim.plugins.extras.formatting.black' },
--
--   { import = 'lazyvim.plugins.extras.lang.typescript' },
--   { import = 'lazyvim.plugins.extras.lang.docker' },
--   { import = 'lazyvim.plugins.extras.lang.git' },
--   { import = 'lazyvim.plugins.extras.lang.php' },
--   { import = 'lazyvim.plugins.extras.lang.python' },
--   { import = 'lazyvim.plugins.extras.lang.clangd' },
--   { import = 'lazyvim.plugins.extras.lang.markdown' },
--
--   { import = 'lazyvim.plugins.extras.ui.treesitter-context' },
--
--   { import = 'lazyvim.plugins.extras.coding.luasnip' },
--   { import = 'lazyvim.plugins.extras.coding.copilot-chat' },
--   { import = 'lazyvim.plugins.extras.coding.yanky' },
--   { import = 'lazyvim.plugins.extras.coding.yanky' },
--   { import = 'lazyvim.plugins.extras.coding.mini-surround' },
--
--   { import = 'lazyvim.plugins.extras.editor.fzf' },
--   { import = 'lazyvim.plugins.extras.editor.aerial' },
--
--   { import = 'plugins-lazy' },
-- }, {
--   git = {
--     timeout = 100000000,
--   },
-- })

require('lazy').setup({
  { 'folke/lazy.nvim', version = false },
  {
    'LazyVim/LazyVim',
    version = false,
    import = 'lazyvim.plugins',
    opts = {
      colorscheme = 'habamax',
      news = { lazyvim = false, neovim = false },
    },
  },

  -- UI
  { 'nvimdev/dashboard-nvim', enabled = false },

  -- editor
  { import = 'lazyvim.plugins.extras.editor.fzf' },
  { import = 'lazyvim.plugins.extras.editor.aerial' },
  { 'echasnovski/mini.splitjoin', version = '*', opts = {} },
  {
    'echasnovski/mini.comment',
    version = '*',
    opts = {
      mappings = {
        comment = '<c-c>',
        comment_line = '<c-c>',
        comment_visual = '<c-c>',
        textobject = '<c-c>',
      },
    },
  },
  { 'imsnif/kdl.vim', lazy = false },
  {
    'antosha417/nvim-lsp-file-operations',
    lazy = false,
    opts = {},
    {
      'Wansmer/langmapper.nvim',
      lazy = false,
      config = function()
        local lm = require('langmapper')
        lm.setup()
        lm.hack_get_keymap()
        lm.automapping({ global = true, buffer = true })
      end,
    },
  },
  {
    'hrsh7th/nvim-cmp',
    dependencies = {
      'hrsh7th/cmp-buffer',
      'hrsh7th/cmp-path',
      'hrsh7th/cmp-cmdline',
    },
    ---@param opts cmp.ConfigSchema
    opts = function(_, opts)
      local cmp = require('cmp')
      local luasnip = require('luasnip')
      opts.mapping = vim.tbl_extend('force', opts.mapping, {
        ['<C-u>'] = cmp.mapping.scroll_docs(-4),
        ['<C-d>'] = cmp.mapping.scroll_docs(4),
        ['<CR>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            if luasnip.expandable() then
              luasnip.expand()
            else
              cmp.confirm({
                select = true,
              })
            end
          else
            fallback()
          end
        end),
        ['<Tab>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_next_item()
          elseif luasnip.locally_jumpable(1) then
            luasnip.jump(1)
          else
            fallback()
          end
        end, { 'i', 's' }),
        ['<S-Tab>'] = cmp.mapping(function(fallback)
          if cmp.visible() then
            cmp.select_prev_item()
          elseif luasnip.locally_jumpable(-1) then
            luasnip.jump(-1)
          else
            fallback()
          end
        end, { 'i', 's' }),
      })

      cmp.setup.cmdline({ '/', '?' }, {
        mapping = cmp.mapping.preset.cmdline(),
        sources = { { name = 'buffer' } },
      })

      cmp.setup.cmdline(':', {
        mapping = cmp.mapping.preset.cmdline(),
        sources = cmp.config.sources(
          { { name = 'path' } },
          { { name = 'cmdline' } }
        ),
        matching = { disallow_symbol_nonprefix_matching = false },
      })
    end,
  },

  --treesitter
  {
    'nvim-treesitter/nvim-treesitter',
    opts = {
      incremental_selection = {
        enabled = true,
        keymaps = {
          init_selection = '+',
          node_incremental = '+',
          scope_incremental = false,
          node_decremental = '-',
        },
      },
    },
  },

  -- formatting
  { import = 'lazyvim.plugins.extras.formatting.prettier' },
  { import = 'lazyvim.plugins.extras.formatting.black' },

  -- langs
  { import = 'lazyvim.plugins.extras.lang.typescript' },
  { import = 'lazyvim.plugins.extras.lang.docker' },
  { import = 'lazyvim.plugins.extras.lang.git' },
  { import = 'lazyvim.plugins.extras.lang.php' },
  { import = 'lazyvim.plugins.extras.lang.python' },
  { import = 'lazyvim.plugins.extras.lang.clangd' },
  { import = 'lazyvim.plugins.extras.lang.markdown' },
}, {
  -- debug = true,
})
